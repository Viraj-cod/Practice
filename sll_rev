class node:
    def __init__(self,data):
        self.data = data
        self.next = None
    
class linkedlist:
    def __init__(self):
        self.head = None
    
    def add(self,val):
        new = node(val)
        if self.head is None:
            self.head = new
            return
        temp = self.head
        while temp.next is not None:
            temp = temp.next
        temp.next = new
    
    def insert_front(self,val):
        new = node(val)
        if self.head is None:
            self.head = new
            return
        new.next = self.head
        self.head = new
        self.display()
    
    def remove_front(self):
        if self.head is None:
            return None
        self.head = self.head.next
        self.display()
    def insert_bewtween(self,dest,val):
        new = node(val)
        if self.head is None:
            self.head = new
            return
        temp = self.head
        while temp.data != dest:
            temp = temp.next
        new.next = temp.next
        temp.next = new
        self.display()
    
    def remove_bewtween(self,dest):
        slow = self.head
        fast = self.head.next
        while fast.data != dest:
            fast=fast.next
            slow=slow.next
        slow.next = fast.next
        self.display()
        
    def display(self):
        temp = self.head
        while temp is not None:
            print(temp.data,end='->')
            temp = temp.next
        print('None')
    
    def rem_last(self):
        slow = self.head
        fast = self.head.next
        while fast.next is not None:
            fast = fast.next
            slow = slow.next
        slow.next = None
        self.display()

ls = linkedlist()
ls.add(3)
ls.add(3)
ls.add(5)
ls.add(3)
ls.display()
ls.insert_front(9)
ls.insert_bewtween(5,8)
#ls.rem_rep()
ls.rem_last()
ls.remove_bewtween(5)
