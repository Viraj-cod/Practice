class Node:
    def __init__(self,data):
        self.data = data
        self.next = None

class Linkedlist:
    def __init__(self):
        self.head = None
        
    def add(self,data):
        new = Node(data)
        if self.head == None:
            self.head = new
            return
        
        temp = self.head
        while temp.next is not None:
            temp = temp.next
        temp.next = new
    
    def display(self):
        temp = self.head
        while temp is not None:
            print(temp.data,end ='->')
            temp = temp.next
        print('None')
        
def lng(ll):
    temp = ll.head
    count = 0
    while temp is not None:
        count += 1
        temp= temp.next
    return count
    
def middle(ll):
    ln = lng(ll)
    if ln % 2 != 0:
        mid = int(ln / 2) 
        count = 0
        temp = ll.head
        while temp.next is not None:
            if count == mid:
                return temp.data
            count += 1
            temp = temp.next
    else:
        mid = ln/2
        count = 0
        temp = ll.head
        while temp.next is not None:
            if count == mid:
                return temp.data 
            count += 1
            temp = temp.next
        
def merge(l1,l2):
    len1 = lng(l1)
    len2 = lng(l2)
    if len1< len2:
        mid = middle(l1)
        temp = l1.head
        while temp is not None:
            if temp.data == mid:
                return temp.data
            temp = temp.next
    else:
        mid = middle(l2)
        temp = l2.head
        while temp is not None:
            if temp.data == mid:
                return temp.data
            temp = temp.next
            
ll1 = Linkedlist()
ll2 = Linkedlist()

ll1.add(4)
ll1.add(1)
ll1.add(8)
ll1.add(4)
ll1.add(5)

ll2.add(5)
ll2.add(6)
ll2.add(1)
ll2.add(8)
ll2.add(4)
ll2.add(5)


ll1.display()
ll2.display()
print(merge(ll1,ll2))


