class node:
    def __init__(self,val):
        self.val = val
        self.left = None
        self.right = None

class bst:
    def __init__(self):
        self.root = None
        self.res = []
    
    def insert(self,val):
        if self.root is None:
            self.root = node(val)
        else:
            self._insert_recursively(self.root,val)
    
    def _insert_recursively(self,root,val):
        if val < root.val:
            if root.left is None:
                root.left = node(val)
            else:
                self._insert_recursively(root.left,val)
        else:
            if root.right is None:
                root.right = node(val)
            else:
                self._insert_recursively(root.right,val)
    
    def get_min(self,root):
        self._min_diff(root)
        return min(self.res)
    
    def _min_diff(self,root):
        if root.left is not None:
            if (root.val - root.left.val) > 0:
                self.res.append(root.val - root.left.val)
            self._min_diff(root.left)
        if root.right is not None:
            if (root.val - root.right.val) > 0:
                self.res.append(root.val - root.right.val)
            self._min_diff(root.right)
            
    def display(self,root,level = 0):
        if root:
            self.display(root.right,level+1)
            print(' '*4*level+'->',root.val)
            self.display(root.left,level+1)

def main():
    ele = list(map(int,input("Enter the elements:").split()))
    BT = bst()
    for i in ele:
        BT.insert(i)
    #BT.display(BT.root)
    print(BT.get_min(BT.root))

if __name__ == '__main__':
    main()
