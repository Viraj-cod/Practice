class node:
    def __init__(self,val):
        self.val=val
        self.left=None
        self.right=None
    
class bst:
    def __init__(self):
        self.root=None
    
    def insert(self,val):
        if self.root == None:
            self.root=node(val)
        return self.__insert(self.root,val)
    
    def __insert(self,current,val):
        if current is None:
            return node(val)
        if current.val> val:
            current.left=self.__insert(current.left,val)
        elif current.val < val:
            current.right=self.__insert(current.right,val)
        return current
    
    def dis(self,root,level=0):
        if root:
            self.dis(root.right,level+1)
            print(' '*level*4+'->',root.val)
            self.dis(root.left,level+1)
        
    def contains(self,val):
        return self.__contains(self.root,val)
    
    def __contains(self,current,val):
        if current == None:
            return False
        if current.val == val:
            return True
        if current.val < val:
            return self.__contains(current.right,val)
        if current.val > val:
            return self.__contains(current.left,val)
    
    def delete(self,val):
        return self.__delete(self.root,val)
    def fmin(self,current):
        while current.left:
            current=current.left
        return current.val
    def __delete(self,current,val):
        if current == None:
            return None
        if current.val > val:
            current.left=self.__delete(current.left,val)
        elif current.val < val:
            current.right = self.__delete(current.right,val)
        else:
            if current.right is None and current.left is None:
                return None
            elif current.left is None:
                current = current.right
            elif current.right is None:
                current = current.left
            else:
                mn= self.fmin(current.right)
                current.val = mn
                current.right = self.__delete(current.right,mn)
                
        return current
BST=bst()
BST.insert(5)
BST.insert(2)
BST.insert(7)
BST.insert(8)
BST.insert(1)
BST.insert(4)
BST.insert(6)
BST.dis(BST.root)
print('\n\n')
BST.delete(5)
BST.delete(6)
BST.delete(2)

BST.dis(BST.root)

print(BST.contains(5))
